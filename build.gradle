plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok'

    // ✅ 스프링 시큐리티 의존성 주입
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // ✅ MyBatis 사용
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'

    // ✅ JSP 엔진 추가 (Tomcat Embedded Jasper)
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'

    // ✅ Spring Boot 3.x 이상에서 JSTL 사용 (Jakarta EE 9+ 호환)
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:2.0.0'
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl:2.0.0'

    // ✅ WAR 배포할 경우 Tomcat을 providedRuntime으로 유지, 일반 실행 시 implementation
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // ✅ 이메일 인증 사용하기 위해 추가
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    implementation 'org.json:json:20231013'
}


tasks.named('test') {
    useJUnitPlatform()
}